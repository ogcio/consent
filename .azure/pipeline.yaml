trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - "*"
resources:
  repositories:
    - repository: pipeline-templates
      type: github
      name: ogcio/building-blocks-pipelines
      ref: main
      endpoint: ogcio

variables:
  secretsManagerAwsConnection: "aws-life-events-prod-building-blocks-azure-devops"
  githubSecret: "shared-secrets/github-token"
  npmjsSecret: "shared-secrets/npmjs-token"
  awsRegion: "eu-west-1"

stages:
  - stage: setup
    displayName: Setup Dependencies
    dependsOn: []
    jobs:
      - job: SetupDependencies
        displayName: Setup pnpm and Install Dependencies
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml

  - stage: securityScan
    displayName: Security Scans
    dependsOn: []
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - template: security/gitleaks.yml@pipeline-templates
      # TODO: Uncomment when KICS is ready ( Timeout processing the results of the query: openAPI array_without_maximum_number_items error="context deadline exceeded )
      # - job:
      #   displayName: Checkmarx KICS
      #   pool:
      #     vmImage: "ubuntu-latest"
      #   container: checkmarx/kics:debian
      #   steps:
      #     - script: /app/bin/kics scan -p ${PWD} -o ${PWD} --report-formats "json,JUnit" --output-name kics-result --ci --fail-on 'critical,high' --config ./kics-config.json
      #       displayName: KICS Scan
      #     - script: cat kics-result.json
      #       condition: succeededOrFailed()
      #       displayName: KICS Results
      #     - task: PublishTestResults@2
      #       condition: succeededOrFailed()
      #       inputs:
      #         testResultsFormat: "JUnit"
      #         testResultsFiles: "$(System.DefaultWorkingDirectory)/junit-kics-result.xml"

  - stage: lintingAndFormatting
    displayName: Linting and Formatting Checks
    dependsOn: setup
    jobs:
      - job: LintAndFormat
        displayName: Run Linting and Formatting
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml
          - script: |
              pnpm run check:linting
              pnpm run check:formatting
            displayName: "Run Linting and Formatting"

  - stage: checksCompleted
    displayName: Checks Completed
    dependsOn:
      - lintingAndFormatting
      - securityScan
    jobs:
      - job: ChecksCompleted
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: echo "All checks completed"

  - stage: testConsent
    displayName: Testing Consent Package
    dependsOn: checksCompleted
    jobs:
      - job: RunConsentTests
        displayName: Run Consent Package Tests
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml
          - script: |
              pnpm --filter @ogcio/consent test --run --reporter=default --reporter=junit --outputFile.junit=./results.xml --coverage
            displayName: "Run Consent Package Tests"
          - task: PublishTestResults@2
            inputs:
              testResultsFiles: "$(System.DefaultWorkingDirectory)/results.xml"
              testRunTitle: "Consent Package Tests Report"
              mergeTestResults: true
          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"

  - stage: typeCheckAll
    displayName: Type Check All Packages
    dependsOn: checksCompleted
    jobs:
      - job: TypeCheckAll
        displayName: Type Check All Packages
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml
          - script: |
              pnpm run type-check
            displayName: "Type Check All Packages"

  - stage: buildConsent
    displayName: Build Consent Package
    dependsOn: checksCompleted
    jobs:
      - job: BuildConsentPackage
        displayName: Build Consent Package
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml
          - script: |
              pnpm --filter @ogcio/consent build
            displayName: "Build Consent Package"

  - stage: buildNextjsExample
    displayName: Build Next.js Example
    dependsOn: buildConsent
    jobs:
      - job: BuildNextjsExample
        displayName: Build Next.js Example App
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: templates/pnpm-install.yaml
          - script: |
              pnpm --filter @ogcio/consent-nextjs-example build
            displayName: "Build Next.js Example App"

  - stage: checkTestBuildApprovalGateways
    displayName: Test and Build Approval Gateways
    dependsOn:
      - testConsent
      - typeCheckAll
      - buildConsent
      - buildNextjsExample
    jobs:
      - job: CheckTestBuildApprovalGateways
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - script: echo "All tests and build completed"

  - stage: retrieveCredentials
    displayName: Retrieve credentials from AWS Secrets Manager
    dependsOn: checkTestBuildApprovalGateways
    pool:
      vmImage: "ubuntu-latest"
    jobs:
      - job: retrievePublishCredentials
        displayName: Retrieve GitHub and NPM credentials
        steps:
          - checkout: none
          - task: AWSShellScript@1
            name: setGithubToken
            displayName: Retrieve GitHub credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export GITHUB_TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.githubSecret }} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN)
                echo "##vso[task.setvariable variable=githubTokenADO;issecret=true;isoutput=true;]$GITHUB_TOKEN"
          - task: AWSShellScript@1
            name: setNPMjsToken
            displayName: Retrieve NPM credentials
            inputs:
              awsCredentials: ${{ variables.secretsManagerAwsConnection }}
              regionName: ${{ variables.awsRegion }}
              scriptType: "inline"
              inlineScript: |
                export TOKEN=$(aws secretsmanager get-secret-value --secret-id ${{ variables.npmjsSecret }} | jq --raw-output '.SecretString' | jq -r .TOKEN)
                echo "##vso[task.setvariable variable=npmjsTokenADO;issecret=true;isoutput=true;]$TOKEN"

  - stage: release
    displayName: Release Management
    dependsOn: retrieveCredentials
    jobs:
      - job: HandleRelease
        variables:
          - name: githubTokenADO
            value: $[stageDependencies.retrieveCredentials.retrievePublishCredentials.outputs['setGithubToken.githubTokenADO']]
          - name: npmjsTokenADO
            value: $[stageDependencies.retrieveCredentials.retrievePublishCredentials.outputs['setNPMjsToken.npmjsTokenADO']]
        displayName: Handle Release Process
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - template: release/release-please.yml@pipeline-templates
            parameters:
              npmToken: $(npmjsTokenADO)
              githubToken: $(githubTokenADO)
              repoUrl: "https://github.com/ogcio/consent"
              packageName: "@ogcio/consent"
